"use strict";(self.webpackChunkgrid_docs=self.webpackChunkgrid_docs||[]).push([[9152],{3905:function(e,n,a){a.d(n,{Zo:function(){return u},kt:function(){return m}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),o=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=o(e.components);return t.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=o(a),m=r,h=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return a?t.createElement(h,l(l({ref:n},u),{},{components:a})):t.createElement(h,l({ref:n},u))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=a[o];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8303:function(e,n,a){a.d(n,{Z:function(){return o}});var t=a(7294),r=a(6010),i={note:t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},t.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})),tip:t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},t.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})),danger:t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},t.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})),info:t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},t.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})),caution:t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},t.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},l={note:"secondary",tip:"success",danger:"danger",info:"info",caution:"warning"};function s(e){var n=e.children,a=e.type,s=e.title,p=void 0===s?a:s,o=e.icon,u=void 0===o?i[a]:o;return t.createElement("div",{className:(0,r.Z)("admonition","admonition-"+a,"alert","alert--"+l[a])},t.createElement("div",{className:"admonition-heading"},t.createElement("h5",null,t.createElement("span",{className:"admonition-icon"},u),p)),t.createElement("div",{className:"admonition-content"},n))}var p="admonition_heading_BIf6",o=function(e){return t.createElement("div",{className:p},t.createElement(s,{type:"info",title:"Note"},"\xa0\xa0",t.createElement("b",null,e.children)))}},9328:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return o},toc:function(){return u},default:function(){return c}});var t=a(7462),r=a(3366),i=(a(7294),a(3905)),l=(a(8303),["components"]),s={},p="Hyperparameter Sweeps",o={unversionedId:"features/runs/sweep-syntax",id:"features/runs/sweep-syntax",title:"Hyperparameter Sweeps",description:"Grid allows running hyperparameter sweeps without changing a single line of code! Just make sure your script can take arguments:",source:"@site/docs/features/runs/sweep-syntax.md",sourceDirName:"features/runs",slug:"/features/runs/sweep-syntax",permalink:"/features/runs/sweep-syntax",editUrl:"https://github.com/gridai/grid-docs/edit/master/docs/features/runs/sweep-syntax.md",tags:[],version:"current",lastUpdatedAt:1648431505,formattedLastUpdatedAt:"3/28/2022",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"attaching-datastores",permalink:"/features/runs/attaching-datastores"},next:{title:"Private Repos",permalink:"/features/runs/private-repos"}},u=[{value:"Python flags",id:"python-flags",children:[{value:"boolean",id:"boolean",children:[],level:3},{value:"float",id:"float",children:[],level:3},{value:"int",id:"int",children:[],level:3},{value:"string",id:"string",children:[],level:3}],level:2},{value:"Grid extensions",id:"grid-extensions",children:[{value:"distribution",id:"distribution",children:[],level:3},{value:"list",id:"list",children:[],level:3},{value:"range",id:"range",children:[],level:3},{value:"string list",id:"string-list",children:[],level:3}],level:2},{value:"Grid Search",id:"grid-search",children:[],level:2},{value:"Random Search",id:"random-search",children:[],level:2}],d={toc:u};function c(e){var n=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hyperparameter-sweeps"},"Hyperparameter Sweeps"),(0,i.kt)("p",null,"Grid allows running ",(0,i.kt)("a",{parentName:"p",href:"https://www.grid.ai/what-are-hyperparameter-sweeps-and-why-are-they-important-to-production-machine-learning"},"hyperparameter sweeps")," without changing a single line of code! Just make sure your script can take arguments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python main.py --layers 32 --learning_rate 0.01\n")),(0,i.kt)("note",null,"This page provides a list of arguments specific to running hyperparameter sweeps. For the full Grid CLI API reference, visit [this page](/cli/api)."),(0,i.kt)("h2",{id:"python-flags"},"Python flags"),(0,i.kt)("h3",{id:"boolean"},"boolean"),(0,i.kt)("p",null,"Passing in a flag without values is treated like a boolean"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"grid run main.py --do_something\n")),(0,i.kt)("p",null,"Alternatively, your script can be written in such a way that it takes an arbitrary value and acts on them as booleans. For example, your script can be written in such a way that it treats 1/0, True/False, 'yes'/'no', etc as boolean values. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"grid run foo.py --bar 1 --barry 0\n")),(0,i.kt)("p",null,"This is the recommended syntax because it allows you to utilize arbitrary indicator hyperparameters in the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.grid.ai/features/runs/sweep-syntax#grid-search"},"grid search")," and ",(0,i.kt)("a",{parentName:"p",href:"https://docs.grid.ai/features/runs/sweep-syntax#random-search"},"random search")," features. For example, the following will invoke a grid search:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"grid run foo.py --bar '[True, False]'\n")),(0,i.kt)("h3",{id:"float"},"float"),(0,i.kt)("p",null,"Grid supports standard float notation and scientific notation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"grid run main.py --learning_rate 0.01\ngrid run main.py --learning_rate 1e-2\n")),(0,i.kt)("h3",{id:"int"},"int"),(0,i.kt)("p",null,"Grid supports standard integer notation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"grid run main.py --batch_size 32\n")),(0,i.kt)("h3",{id:"string"},"string"),(0,i.kt)("p",null,"Grid supports standard string notation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"grid run main.py --model bert\ngrid run main.py --model 'bert'\ngrid run main.py --model \"bert\"\n")),(0,i.kt)("h2",{id:"grid-extensions"},"Grid extensions"),(0,i.kt)("h3",{id:"distribution"},"distribution"),(0,i.kt)("p",null,"Calls the script with each value sampled from any ",(0,i.kt)("a",{parentName:"p",href:"https://numpy.org/doc/1.16/reference/routines.random.html#distributions"},"numpy distribution"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'grid run main.py --alpha "uniform(1e-5, 1e-1, 3)"\n')),(0,i.kt)("p",null,"Grid will submit 3 jobs here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# job 1\ngrid run main.py --alpha 0.03977392,\n\n# job 2\ngrid run main.py --alpha 0.04835479\n\n# job 3\ngrid run main.py --alpha 0.05200016\n")),(0,i.kt)("p",null,"This is equivalent to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},">>> np.random.uniform(1e-5, 1e-1, 3)\narray([0.03977392, 0.04835479, 0.05200016])\n")),(0,i.kt)("h3",{id:"list"},"list"),(0,i.kt)("p",null,"Calls the script with each value in the list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'grid run main.py --layers "[32, 64, 128]"\n')),(0,i.kt)("p",null,"Grid will submit 3 jobs here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# job 1\ngrid run main.py --layers 32\n\n# job 2\ngrid run main.py --layers 64\n\n# job 3\ngrid run main.py --layers 128\n")),(0,i.kt)("h3",{id:"range"},"range"),(0,i.kt)("p",null,"Calls the script with each value in the range."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'grid run main.py --layers "range(1, 10, 2)"\n')),(0,i.kt)("p",null,"Grid will submit 3 jobs here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# job 1\ngrid run main.py --layers 1\n\n# job 2\ngrid run main.py --layers 3\n\n# job 3\ngrid run main.py --layers 5\n\n# job 4\ngrid run main.py --layers 7\n\n# job 5\ngrid run main.py --layers 9\n")),(0,i.kt)("p",null,"This is equivalent to the ",(0,i.kt)("a",{parentName:"p",href:"https://www.w3schools.com/python/ref_func_range.asp"},"Python Range syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},">>> list(range(1, 10, 2))\n[1, 3, 5, 7, 9]\n")),(0,i.kt)("h3",{id:"string-list"},"string list"),(0,i.kt)("p",null,"Calls the script with each value in the list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"grid run main.py --model \"['resnet18' 'transformer', 'resnet50']\"\n")),(0,i.kt)("p",null,"Grid will submit 3 jobs here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# job 1\ngrid run main.py --model resnet18\n\n# job 2\ngrid run main.py --model transformer\n\n# job 3\ngrid run main.py --model resnet50\n")),(0,i.kt)("h2",{id:"grid-search"},"Grid Search"),(0,i.kt)("p",null,"To generate combinations (ie: a Grid Search), pass in multiple flags"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'grid run main.py --alpha "uniform(1e-5, 1e-1, 3)" --beta "[1, 2, 3, 4]"\n')),(0,i.kt)("p",null,"Generates 3 x 4 = 12 experiments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"grid run main.py --alpha 0.03977392 --beta 1\ngrid run main.py --alpha 0.03977392 --beta 2\ngrid run main.py --alpha 0.03977392 --beta 3\ngrid run main.py --alpha 0.03977392 --beta 4\n\ngrid run main.py --alpha 0.04835479 --beta 1\ngrid run main.py --alpha 0.04835479 --beta 2\ngrid run main.py --alpha 0.04835479 --beta 3\ngrid run main.py --alpha 0.04835479 --beta 4\n\ngrid run main.py --alpha 0.05200016 --beta 1\ngrid run main.py --alpha 0.05200016 --beta 2\ngrid run main.py --alpha 0.05200016 --beta 3\ngrid run main.py --alpha 0.05200016 --beta 4\n")),(0,i.kt)("p",null,"To run only a sample of these, choose the Random search option."),(0,i.kt)("h2",{id:"random-search"},"Random Search"),(0,i.kt)("p",null,"The following command, generates 12 experiments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'grid run main.py --alpha "uniform(1e-5, 1e-1, 3)" --beta "[1, 2, 3, 4]"\n')),(0,i.kt)("p",null,"Generates 3 x 4 = 12 experiments"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"grid run main.py --alpha 0.03977392 --beta 1\ngrid run main.py --alpha 0.03977392 --beta 2\ngrid run main.py --alpha 0.03977392 --beta 3\ngrid run main.py --alpha 0.03977392 --beta 4\n\ngrid run main.py --alpha 0.04835479 --beta 1\ngrid run main.py --alpha 0.04835479 --beta 2\ngrid run main.py --alpha 0.04835479 --beta 3\ngrid run main.py --alpha 0.04835479 --beta 4\n\ngrid run main.py --alpha 0.05200016 --beta 1\ngrid run main.py --alpha 0.05200016 --beta 2\ngrid run main.py --alpha 0.05200016 --beta 3\ngrid run main.py --alpha 0.05200016 --beta 4\n")),(0,i.kt)("p",null,"Using ",(0,i.kt)("a",{parentName:"p",href:"https://jmlr.csail.mit.edu/papers/volume13/bergstra12a/bergstra12a.pdf"},"Random Search")," you can get close to optimal performance without needing to run all possible combinations. To use random search with Grid, simply choose that option"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'grid run --strategy random_search \\\n         --num_trials 3 \\\n         main.py \\\n         --alpha "uniform(1e-5, 1e-1, 3)" \\\n         --beta "[1, 2, 3, 4]"\n')),(0,i.kt)("p",null,"This will choose a subset of the combinations generated and only run 3 experiments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"grid run main.py --alpha 0.03977392 --beta 1\ngrid run main.py --alpha 0.03977392 --beta 2\ngrid run main.py --alpha 0.03977392 --beta 3 # <-- chosen (randomly)\ngrid run main.py --alpha 0.03977392 --beta 4\n\ngrid run main.py --alpha 0.04835479 --beta 1 # <-- chosen (randomly)\ngrid run main.py --alpha 0.04835479 --beta 2\ngrid run main.py --alpha 0.04835479 --beta 3 # <-- chosen (randomly)\ngrid run main.py --alpha 0.04835479 --beta 4\n\ngrid run main.py --alpha 0.05200016 --beta 1\ngrid run main.py --alpha 0.05200016 --beta 2\ngrid run main.py --alpha 0.05200016 --beta 3\ngrid run main.py --alpha 0.05200016 --beta 4\n")))}c.isMDXComponent=!0}}]);